#!/usr/bin/env bash
#=====================HEADER=========================================|
#AUTOR
# Jefferson 'slackjeff' Rocha <root@slackjeff.com.br>
#
#LICENCE
# MIT
#
#Package
# name-version-architeture.mz
#
#VERSION
# 1.3
#
#CHANGELOG
# (VERSÃO 1.1) - Jefferson Rocha
#   - FIXADO, agora ao terminar de remover tudo é excluido a lista 
#   de referencia em /var/log/list/pacote
#
# (VERSÃO 1.2) - Jefferson Rocha
#   - Quando o usuario pede pra remover um pacote e ter mais de um
#   nome igual é exibido na tela.
#   - Entrada no -b, --burn não poderá ter caracteres # @ * ,
#
#====================================================================|

#===================VARIAVEIS
dirlist='/var/log/list'
dirdesc='/var/log/desc'
#========Colors
red='\033[31;1m'
blue='\033[34;1m'
end='\033[m'

#===================TESTES
[[ -z "$1" ]] && { echo "-h, --help"; exit 1 ;} # Sem parametros?

#===================FUNCOES

_HELP_pt()
{
    cat <<EOF | less
burnpkg - Simples ferramenta para remover um pacote do sistema

OPÇÕES:

-b, --burn
  NomeDoPacote

-h, --help
  Exibe essa ajuda e sai

COMO USAR?

  Supondo que você queira remover um pacote do sistema, para este
  exemplo vamos por o google_chrome, você executaria como root:

  # burnpkg google_chrome

  E o resto o programa faz para você! Todos arquivos e diretórios
  são removidos daquele determinado programa. Mas lembre-se cada
  pacote é cada pacote, então mesmo que removemos o pacote X os pacotes
  necessários para o programa X funcionar não serão removidos pelo burnpkg.
  Está é sua tarefa.
  
  NOTA!
  Caso o programa que você pesquisou não retornar nada é sinal que não existe
  aquele determinado programa no sistema.

LISTAS

  Todas as listas dos pacotes que você criou com o utilitário createpkg fica
  em /var/log/list/ , burnpkg faz a conferência desta pasta!   

AUTOR
  Jefferson 'Slackjeff' Rocha <root@slackjeff.com.br>

LICENÇA
  MIT
EOF
}

# Função para listagem de lista
_PKG_CONF()
{
    count_occurrences=0
    pushd "$dirdesc" 1>/dev/null
    re="\b${pack}\b"
    for search_pack in *; do
        if [[ "$search_pack" =~ ^${re}.* ]]; then # Pacote existe?
            for q in *; do # Checando quantas ocorrencias existem.
                if [[ "$q" =~ ^${re}.* ]]; then
                    # Se existir varios pacotes com o mesmo nome incremente!
                    count_occurrences="$(( $count_occurrences + 1 ))"
                fi
            done
            # Carregando descrição do pacote para testes!
            # se caso o pacote tem mais de uma versão no sistema.
            ( # Subshell para não sujar ambiente com o source
             source ${search_pack}
             local name_version="${pkgname}-${version}" # Variavel para vericação nome + versão
             if [[ "${name_version}.desc" =~ ^${re}.desc ]] || [[ "${name_version}.desc" =~ ^${re}.* && "$count_occurrences" -eq '1' ]] ; then
                 echo -e "############################## ${red}REMOVE${end} ##############################"
                 echo -e "PACKAGE: ${blue}${pkgname}${end}"
                 echo -e "VERSION: ${blue}${version}${end}"
                 echo -e "####################################################################\n"
                 pushd "${dirlist}" 1>/dev/null # Entrando no diretório das listas /var/log/list/
                 search_pack="${search_pack/%.desc/.list}" # se terminar com .desc substitua por .list
                 # Chamada função para remoção.
                 [[ -e "${search_pack}" ]] && _BURN && { popd 1>/dev/null; return 0 ;} || { popd 1>/dev/null; return 1 ;}
             else
                 # Caiu aqui? Então existe mais de um pacote com o mesmo nome
                 # porém com versões diferente...
                 # O programa não pode fazer nada, apenas alertar.
                 search_pack="${search_pack/%.desc/}"
                 echo -e "${red}[FOUND]${end} $search_pack"
             fi

            #return
        ) # fim de Subshell
        fi
    done
}

# Função para remoção dos arquivos e diretórios do pacote
_BURN()
{
   ( # Subshell
    cd "/" 1>/dev/null # Entrando na raiz
    #AC = Arquivo
    #ED = Diretorio Vazio

    # Removendo arquivos normais
    # Depois do loop estar completo ele vai para
    # remoção de diretórios vazios
    a='0' # Variavel incremento arquivos
    d='0' # Variavel incremento diretorios vazios
    while IFS= read archive; do
        if [[ -f "$archive" ]]; then
            if rm "$archive" 2>/dev/null; then
                a="$(($a + 1))"
                echo -e "${red}Burned AC${end}\t${archive}"   
                archive="$(echo "$archive" | sed 's|/|\\/|g')"
                #sed -i "/\b${archive}\b/d" "${dirdesc}/${list}"
            fi
        fi
    done < "${dirlist}/${search_pack}" # Recebendo de _PKG_CONF

    # Tirando todo conteudo da var para ser reaproveitada
    unset archive

    # Removendo diretórios vazios
    while IFS= read archive; do
        if [[ -d "$archive" ]]; then
            if [[ -z "$(ls -A ${archive})" ]]; then 
                if rmdir "${archive}" 2>/dev/null; then
                   d="$(( $d + 1 ))"
                   echo -e "${blue}Burned ED${end}\t${archive}"   
                   archive="$(echo "$archive" | sed 's|/|\\/|g')"
                   #sed -i "/\b${archive}\b/d" "${dirdesc}/${list}"
                fi 
            fi
        fi
    done < "${dirlist}/${search_pack}" # Recebendo de _PKG_CONF

    # Impressão na tela
    if [[ "$a" -gt '0' ]] || [[ "$d" -gt '0' ]]; then
        total="$(( $a + $d ))"
        echo -e "\n=======> ${red}TOTAL BURNED${end} $total Archives."
        echo -e "=======> ${red}BURNED${end} $a Archives and $d Empty Directories"
    fi
    # Removendo lista
    rm "${dirlist}/${list}" 1>/dev/null 2>&1
   ) # Subshell
   return 0
}
case $1 in
    -b|burn)
        shift # Rebaixa baby
        # Se contiver um dos caracteres da lista, não poderá continuar.
        [[ "$1" =~ .*(\*|@|#|,).* ]] && { echo 'Dont Use * or @ or #'; exit 1 ;}
        while [[ -n "$1" ]]; do
            pack="$1"
            _PKG_CONF
            shift
        done
        exit 0
    ;;

    -h|--help) _HELP_pt; exit 0;;
esac
