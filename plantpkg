#!/usr/bin/env bash
#=====================HEADER=========================================|
#AUTOR
# Jefferson 'slackjeff' Rocha <root@slackjeff.com.br>
#
#LICENCE
# MIT
#
#PROGRAM
# plantpkg - plant the package in your root.
#
#VERSION
# 1.0
#
#CHANGELOG
#====================================================================|

#===============VARIAVEIS
export format_pkg='mz'   # Extensão do pacote
export descme='info/desc'
#========Colors
red='\033[31;1m'
blue='\033[34;1m'
cyan='\033[36;1m'
pink='\033[35;1m'
end='\033[m'

#===============TESTES
# Sem root não vai amiguinho.
[[ "$UID" -ne '0' ]] && { echo "Root is required."; exit 1 ;}

# Removendo diretorio info na raiz.
# para deixar tudo limpo ;)
[[ -e "/info/" ]] && rm -r "/info/"

#==================FUNCOES

_HELP_pt()
{
    cat << 'EOF'
plantpkg - Ferramenta de instalação de pacotes .mz

OPÇÕES:
    -i, install
       Instalação de pacote(s)

    -u, upgrade
       Upgrade do(s) pacote(s)

    -h, --help
       Exibe essa ajuda e sai

COMO USAR?

       
EOF
}


_PRE_CONF()
{
    # Variavel pack é importante para descompactar o pacote com o tar.
    # De resto todas informações são puxadas das variaveis presentes no arquivo
    # dentro do diretorio info (desc). Como por exemplo, nome e versão do pacote.
    pack="$1"

    re="\.\<${format_pkg}\>"
    if ! [[ "$pack" =~ .*${re} ]]; then
        echo -e "${red}[Error!]${end} Package need finish $format_pkg"
        return 1
    elif [[ ! -e "$pack" ]]; then # Pacote existe?
        return 1
    fi
    # Pegando somente nome do pacote
    # sem extensão.
    pack="${1/%.mz/}"
    return 0
}

# Função de pré instalação do pacote.
# vamos arrumar tudo antes de seguir o processo.
_PRE_INSTALL_PKG()
{    
    # Descompactando desc primeiro para exibir informações do pacote.
    if ! tar xmf "${pack}.${format_pkg}" -C "/tmp/" "./${descme}"; then
        echo -e "${red}[ERROR!]${end} I could not unzip the file desc."
        exit 1
    else
        # Carregando informações do pacote
        if ! source "/tmp/${descme}"; then
            echo -e "${red}[ERROR!]${end} Not load ${descme}, ABORT."
            return 1
        fi
    fi
    # Pegando tamanho da string
    string_size=${#desc}
    # Se string ultrapassar 44 caracteres, corte!
    [[ "$string_size" -gt '50' ]] && desc="${desc:1:50}"
    if [[ -e "/tmp/${descme}" ]]; then
        echo -e "\n#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#"
        echo -e "${pink}Package:${end}\t$pkgname"
        echo -e "${pink}Version:${end}\t$version"
        echo -e "${pink}Small Desc:${end}\t$desc"
        echo -e "${pink}Maintainer:${end}\t$maintainer"
        echo -e "#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#\n"
        # Variavel puxando de source...
        # Está variavel é importante se caso
        # o usuario passe um caminho completo do pacote exemplo:
        # plantpkg -i /tmp/packages/pacote-versao.mz ou
        # plantpkg -i /tmp/*.mz
        info_pack="${pkgname}-${version}"
        return 0 # Até aqui tudo bem! Podemos continuar com o processo de instalação.
    else
        echo -e "${red}[ERROR!]${end} Could not load /tmp/${descme}."
        echo "Archive not exist. ABORT!"
        return 1
    fi
}

# Verificando se pacote ja existe.
_PKG_EXIST()
{
    local unpack_temporary='/tmp'
    local dir_desc='/var/log/desc'

    # Descompactando temporariamente diretorio *info/* para
    # pegar o arquivo *desc* do pacote.
    if tar xmf "${pack}.${format_pkg}" -C "$unpack_temporary" "./${descme}"; then
        if [[ -e "${unpack_temporary}/${descme}" ]]; then
            if ! source ${unpack_temporary}/${descme}; then
                echo -e "${red}[Error!]${end} Could not find file ${blue}${unpack_temporary}/${desc_me}${end}"
                echo -e "This Archive is important for program verification. Aborting."
                exit 1
            else
                # Nome + versão do pacote que o usuario deu entrada.
                # Esta variavel vai servir para fazer comparação com a
                # Descrição temporária.
                info_pack="${pkgname}-${version}"
            fi
        fi
    fi
    # Verificando se o pacote ja existe... Se bater exatamente
    # com a descrição é sinal que ele não precisa atualizar ;)
    if [[ -e "${dir_desc}/${info_pack}.desc" ]]; then
        echo -e "${blue}[Upgraded!]${end} ${info_pack} already Upgraded in the system."
        echo "No need update;)"
        return 0 # Voltamos para tocar a diante.
    else
        # Vamos precisar pegar na versão do programa original
        # somente os números.
        version_origi_numbers="$(echo "$version" | sed 's/\.desc//; s/\.//g; s/-//;s/^0//')"
          dir_desc='/var/log/desc'      # Variavel para o cd
          re="\b${pkgname}\b"
          pushd "$dir_desc" &>/dev/null # Entrando no diretório
          for i in *; do
              if [[ "$i" =~ ^${re}-.* ]]; then # Padrão bateu?
                  # Pegando somente a versão, tirando ponto, -, e se iniciar com 0
                  # tirar tbm para fazer a operação.
                  version_temp_numbers="$(echo "$i" | cut -d '-' -f 2 | sed 's/\.desc//; s/\.//g; s/-//;s/^0//')"
                  if [[ "$version_origi_numbers" -gt "$version_temp_numbers" ]]; then
                      b="${i/%.desc}" # Cortando final da string.
                      echo -e "Package Installed version:\t${blue}${b}${end}"
                      echo -e "Package you are installing:\t${blue}${pkgname}.${version}${end}"
                      echo -e "\n${blue}[UPDATE]${end} Let's start updating! Wait.\n"
                      #cd - &>/dev/null # Retornando ao diretório anterior
                      popd # Retornando ao diretório aonde estava.
                      burnpkg -b "${pkgname}" # Removendo o pacote
                      _PRE_CONF "$1"
                     _PRE_INSTALL_PKG || exit 1
                     _INSTALL_PKG || exit 1
                  else
                      echo -e "${blue}[Upgraded!]\t${end} ${pink}${info_pack}${end} already Upgraded in the system."
                      return 0
                  fi
              else
                  echo -e "${blue}[NOT FOUND!]${end} The package: ${info_pack} not installed."
                  return 1          
              fi
          done
    fi
}

# Função para gerenciar alguns arquivos do pacote
# como *desc*, e script de pós instalação *pos.sh*
_MANAGE_ARCHIVES()
{
    echo -e "${blue}[UNZIPPED]${end} OK..."
    if [[ -e "/info/desc" ]]; then
        ( # Subshell
          cd "/info/"
          if mv 'desc' "/var/log/desc/${info_pack}.desc"; then
              echo -e "${blue}[MOVED]${end} desc to /var/log/desc/${info_pack}.desc"
          else
              echo -e "${red}[ERROR!]${end} could not move desc to /var/log/desc/${info_pack}.desc"
              echo "ABORTING..."
              return 1
          fi
        )
    else
        echo -e "${red}[ERROR!]${end} /info/desc does not exist. ABORT!"
        return 1
    fi
    [[ -e "info/pos.sh" ]] && { echo -e "${blue}[Post-installation]${end} The script pos.sh was found. Execute now!"; bash "info/pos.sh" ;}
    # Finalizando instalação.
    [[ -d "/info/" ]] && rm -r "/info/" # Apagando diretório /info/ na raiz.
    echo -e "${blue}[INSTALLED]${end} Package ${info_pack}-${format_pkg} successfully installed."
    return 0
}

_INSTALL_PKG()
{
    # Lista de mensagens para exibir em cada nova instalação
    # de pacotes. Estas mensagens são exibidas aleatoriamente.
    dialog_daddy=(
        "Wait while Daddy works!"
        "And here we go. Wait..."
        "Dad is going to work, he's coming!"
        "Daddy is tired but keeps working."
        "Wait baby... I install your package, and then we dance."
        "Did you want a daddy like me?"
        "Daddy is written in Shell Script, OK? now i working..."
        "If one day I become a manager of high level I retire, Wait i Install package."
        "U need more packages on your system. Daddy takes care of this."
        "I'm installing your package, please wait"
        "This package is delicious. Dad will devour a pack."
        "Arrest the goblins. I need to work... Wait, i install your package."
        "Zombies are attacking the city. I'll hurry to install the package. Wait."
        "Go eat popcorn. While I go here I strive to install the package for you."
        "Feel the package at the root. Please wait, I am installing the package."
        "Daddy likes UNIX-LIKE. Please wait I am installing the package."
        "A meteor is falling! Please wait while I install your package."
    )
    # Pegando o número de frases da lista.
    total_dialog_daddy=${#dialog_daddy[@]}
    # Gerando frase randomica.
    number=$(( $RANDOM % $total_dialog_daddy ))
    # Qual será a frase?
    msg_daddy="${dialog_daddy[$number]}"
    echo -e "${blue}${msg_daddy}${end}\n"
    # Vamos verificar se existe o script de pre instalação *pre.sh*
    # Se ele existir o programa deve executalo.
    if tar tf "${pack}.${format_pkg}" ./info/pre.sh &>/dev/null; then
        tmp_pack="/tmp/${pack}" # Var para criação de diretório temporário
        echo -e "${blue}[Pre-Installation]${end} The script pre.sh was found. Execute now!"
        mkdir "$tmp_pack" # Criando arquivo temporário para descompactar pacote
        if ! tar xmf "${pack}.${format_pkg}" -C $tmp_pack 1>/dev/null 2>&1; then
            return 1
        fi
        pushd "$tmp_pack" >/dev/null
        bash "info/pre.sh" # Executando script de pré-instalação pre.sh
        cp -rf * / # Enviando todos arquivos para a /
        _MANAGE_ARCHIVES && { popd >/dev/null; rm -r "${tmp_pack}";return 0 ;} || { popd >/dev/null; rm -r "${tmp_pack}"; return 1 ;}
    else
        # Caiu aqui pode continuar normal.
        if ! tar xmf "${pack}.${format_pkg}" -C / 1>/dev/null; then
            return 1
        else
            _MANAGE_ARCHIVES && return 0 || return 1
        fi  
    fi
}

#==================INICIO


case $1 in
    install|-i) # Instalação de pacotes
        shift # Rebaixe baby
        [[ -z "$1" ]] && _HELP
        while [[ -n "$1" ]]; do
            _PRE_CONF "$@" || exit 1 # Função de configuração de entrada!
            # Vamos fazer a pre configuração antes de instalar o pacote.
            # Se tudo estiver certo o pacote será instalado!
            _PRE_INSTALL_PKG || exit 1
            _INSTALL_PKG || exit 1
            shift
       done
    ;;

    -u|upgrade) # Upgrade de pacotes
        [[ -z "$1" ]] && _HELP
        shift
        while [[ -n "$1" ]]; do           
            _PRE_CONF "$@" || exit 1 # Função de configuração de entrada!
            # Verificando se o pacote existe no sistema.
            _PKG_EXIST "$@" || exit 1
            shift
        done
    ;;

    *) _HELP_pt; exit 0 ;;
esac
